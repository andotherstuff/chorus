name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allow manual triggering

env:
  NODE_VERSION: '18'

jobs:
  # Test and build the main app
  build-app:
    name: Build and Test App
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check || npx tsc -p tsconfig.app.json --noEmit

      - name: Run linter
        run: npm run lint || npx eslint

      - name: Build app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  # Deploy Cloudflare Worker
  deploy-worker:
    name: Deploy Worker to Cloudflare
    runs-on: ubuntu-latest
    needs: build-app # Only deploy if app builds successfully
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install worker dependencies
        working-directory: ./worker/cloudflare-worker
        run: npm ci

      - name: Build worker
        working-directory: ./worker/cloudflare-worker
        run: npm run build || npx tsc

      - name: Deploy to Cloudflare
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          workingDirectory: ./worker/cloudflare-worker
          command: deploy
          secrets: |
            BOT_TOKEN
            VAPID_PUBLIC_KEY
            VAPID_PRIVATE_KEY
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          VAPID_PUBLIC_KEY: ${{ secrets.VAPID_PUBLIC_KEY }}
          VAPID_PRIVATE_KEY: ${{ secrets.VAPID_PRIVATE_KEY }}

  # Build notification bot
  build-bot:
    name: Build Notification Bot
    runs-on: ubuntu-latest
    needs: build-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install bot dependencies
        working-directory: ./notification-bot
        run: |
          cp ../bot-package.json package.json
          npm ci

      - name: Build bot
        working-directory: ./notification-bot
        run: |
          # Create tsconfig if it doesn't exist
          if [ ! -f tsconfig.json ]; then
            cat > tsconfig.json << 'EOF'
          {
            "compilerOptions": {
              "target": "ES2020",
              "module": "commonjs",
              "lib": ["ES2020"],
              "outDir": "./dist",
              "rootDir": "./",
              "strict": true,
              "esModuleInterop": true,
              "skipLibCheck": true,
              "forceConsistentCasingInFileNames": true,
              "resolveJsonModule": true,
              "moduleResolution": "node"
            },
            "include": ["*.ts"],
            "exclude": ["node_modules", "dist"]
          }
          EOF
          fi
          npm run build || npx tsc

      - name: Create Docker image
        working-directory: ./notification-bot
        run: |
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY dist ./dist
          ENV NODE_ENV=production
          CMD ["node", "dist/enhanced-notification-bot.js"]
          EOF
          
          docker build -t chorus-notification-bot .
          docker save chorus-notification-bot > bot-image.tar

      - name: Upload bot image
        uses: actions/upload-artifact@v4
        with:
          name: bot-image
          path: notification-bot/bot-image.tar
          retention-days: 7

  # Deploy to GitHub Pages (optional)
  deploy-pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: build-app
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

      - name: Deploy to Pages
        uses: actions/deploy-pages@v4

  # Send notifications
  notify:
    name: Send Deployment Notifications
    runs-on: ubuntu-latest
    needs: [deploy-worker, build-bot]
    if: always()
    steps:
      - name: Send Discord notification
        if: ${{ secrets.DISCORD_WEBHOOK }}
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Chorus Deployment"
          description: |
            Deployment to production ${{ needs.deploy-worker.result == 'success' && '✅ succeeded' || '❌ failed' }}
            - App Build: ${{ needs.build-app.result }}
            - Worker Deploy: ${{ needs.deploy-worker.result }}
            - Bot Build: ${{ needs.build-bot.result }}
          color: ${{ needs.deploy-worker.result == 'success' && '0x00ff00' || '0xff0000' }}