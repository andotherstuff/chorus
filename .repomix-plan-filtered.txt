This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where empty lines have been removed.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: src/AppRouter.tsx, src/components/auth/LoginArea.tsx, src/components/auth/SignupDialog.tsx, src/components/EditProfileForm.tsx, src/hooks/useCurrentUser.ts, src/hooks/useLoginActions.ts, src/hooks/useNostrPublish.ts, src/lib/utils.ts, src/pages/Index.tsx, src/pages/Settings.tsx
- Files matching these patterns are excluded: .*.*, **/*.pbxproj, **/node_modules/**, **/dist/**, **/build/**, **/compile/**, **/*.spec.*, **/*.pyc, **/.env, **/.env.*, **/*.env, **/*.env.*, **/*.lock, **/*.lockb, **/package-lock.*, **/pnpm-lock.*, **/*.tsbuildinfo
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Empty lines have been removed from all files
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
src/
  components/
    auth/
      LoginArea.tsx
      SignupDialog.tsx
    EditProfileForm.tsx
  hooks/
    useCurrentUser.ts
    useLoginActions.ts
    useNostrPublish.ts
  lib/
    utils.ts
  pages/
    Index.tsx
    Settings.tsx
  AppRouter.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="src/components/auth/SignupDialog.tsx">
// NOTE: This file is stable and usually should not be modified.
// It is important that all functionality in this file is preserved, and should only be modified if explicitly requested.
import React, { useState } from 'react';
import { Download, Key } from 'lucide-react';
import { Button } from '@/components/ui/button.tsx';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog.tsx';
import { toast } from '@/hooks/useToast.ts';
import { useLoginActions } from '@/hooks/useLoginActions';
import { generateSecretKey, nip19 } from 'nostr-tools';
interface SignupDialogProps {
  isOpen: boolean;
  onClose: () => void;
}
const SignupDialog: React.FC<SignupDialogProps> = ({ isOpen, onClose }) => {
  const [step, setStep] = useState<'generate' | 'download' | 'done'>('generate');
  const [isLoading, setIsLoading] = useState(false);
  const [nsec, setNsec] = useState('');
  const login = useLoginActions();
  // Generate a proper nsec key using nostr-tools
  const generateKey = () => {
    setIsLoading(true);
    try {
      // Generate a new secret key
      const sk = generateSecretKey();
      // Convert to nsec format
      setNsec(nip19.nsecEncode(sk));
      setStep('download');
    } catch (error) {
      console.error('Failed to generate key:', error);
      toast({
        title: 'Error',
        description: 'Failed to generate key. Please try again.',
        variant: 'destructive',
      });
    } finally {
      setIsLoading(false);
    }
  };
  const downloadKey = () => {
    // Create a blob with the key text
    const blob = new Blob([nsec], { type: 'text/plain' });
    const url = globalThis.URL.createObjectURL(blob);
    // Create a temporary link element and trigger download
    const a = document.createElement('a');
    a.href = url;
    a.download = 'nsec.txt';
    document.body.appendChild(a);
    a.click();
    // Clean up
    globalThis.URL.revokeObjectURL(url);
    document.body.removeChild(a);
    toast({
      title: 'Key downloaded',
      description: 'Your key has been downloaded. Keep it safe!',
    });
  };
  const finishSignup = () => {
    login.nsec(nsec);
    setStep('done');
    onClose();
    toast({
      title: 'Account created',
      description: 'You are now logged in.',
    });
  };
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className='sm:max-w-md p-0 overflow-hidden rounded-2xl'>
        <DialogHeader className='px-6 pt-6 pb-0 relative'>
          <DialogTitle className='text-xl font-semibold text-center'>
            {step === 'generate' && 'Create Your Account'}
            {step === 'download' && 'Download Your Key'}
            {step === 'done' && 'Setting Up Your Account'}
          </DialogTitle>
          <DialogDescription className='text-center text-muted-foreground mt-2'>
            {step === 'generate' && 'Generate a secure key for your account'}
            {step === 'download' && "Keep your key safe - you'll need it to log in"}
            {step === 'done' && 'Finalizing your account setup'}
          </DialogDescription>
        </DialogHeader>
        <div className='px-6 py-8 space-y-6'>
          {step === 'generate' && (
            <div className='text-center space-y-6'>
              <div className='p-4 rounded-lg bg-gray-50 dark:bg-gray-800 flex items-center justify-center'>
                <Key className='w-16 h-16 text-primary' />
              </div>
              <p className='text-sm text-gray-600 dark:text-gray-300'>
                We'll generate a secure key for your account. You'll need this key to log in later.
              </p>
              <Button
                className='w-full rounded-full py-6'
                onClick={generateKey}
                disabled={isLoading}
              >
                {isLoading ? 'Generating key...' : 'Generate my key'}
              </Button>
            </div>
          )}
          {step === 'download' && (
            <div className='space-y-6'>
              <div className='p-4 rounded-lg border bg-gray-50 dark:bg-gray-800 overflow-auto'>
                <code className='text-xs break-all'>{nsec}</code>
              </div>
              <div className='text-sm text-gray-600 dark:text-gray-300 space-y-2'>
                <p className='font-medium text-red-500'>Important:</p>
                <ul className='list-disc pl-5 space-y-1'>
                  <li>This is your only way to access your account</li>
                  <li>Store it somewhere safe</li>
                  <li>Never share this key with anyone</li>
                </ul>
              </div>
              <div className='flex flex-col space-y-3'>
                <Button
                  variant='outline'
                  className='w-full'
                  onClick={downloadKey}
                >
                  <Download className='w-4 h-4 mr-2' />
                  Download Key
                </Button>
                <Button
                  className='w-full rounded-full py-6'
                  onClick={finishSignup}
                >
                  I've saved my key, continue
                </Button>
              </div>
            </div>
          )}
          {step === 'done' && (
            <div className='flex justify-center items-center py-8'>
              <div className='animate-spin rounded-full h-12 w-12 border-b-2 border-primary'></div>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
};
export default SignupDialog;
</file>

<file path="src/hooks/useCurrentUser.ts">
import { type NLoginType, NUser, useNostrLogin } from '@nostrify/react/login';
import { useNostr } from '@nostrify/react';
import { useCallback, useMemo } from 'react';
import { useAuthor } from './useAuthor.ts';
export function useCurrentUser() {
  const { nostr } = useNostr();
  const { logins } = useNostrLogin();
  const loginToUser = useCallback((login: NLoginType): NUser  => {
    switch (login.type) {
      case 'nsec': // Nostr login with secret key
        return NUser.fromNsecLogin(login);
      case 'bunker': // Nostr login with NIP-46 "bunker://" URI
        return NUser.fromBunkerLogin(login, nostr);
      case 'extension': // Nostr login with NIP-07 browser extension
        return NUser.fromExtensionLogin(login);
      // Other login types can be defined here
      default:
        throw new Error(`Unsupported login type: ${login.type}`);
    }
  }, [nostr]);
  const users = useMemo(() => {
    const users: NUser[] = [];
    for (const login of logins) {
      try {
        const user = loginToUser(login);
        users.push(user);
      } catch (error) {
        console.warn('Skipped invalid login', login.id, error);
      }
    }
    return users;
  }, [logins, loginToUser]);
  const user = users[0] as NUser | undefined;
  const author = useAuthor(user?.pubkey);
  return {
    user,
    users,
    ...author.data,
  };
}
</file>

<file path="src/hooks/useLoginActions.ts">
import { useNostr } from '@nostrify/react';
import { NLogin, useNostrLogin } from '@nostrify/react/login';
// NOTE: This file should not be edited except for adding new login methods.
export function useLoginActions() {
  const { nostr } = useNostr();
  const { logins, addLogin, removeLogin } = useNostrLogin();
  return {
    // Login with a Nostr secret key
    nsec(nsec: string): void {
      const login = NLogin.fromNsec(nsec);
      addLogin(login);
    },
    // Login with a NIP-46 "bunker://" URI
    async bunker(uri: string): Promise<void> {
      const login = await NLogin.fromBunker(uri, nostr);
      addLogin(login);
    },
    // Login with a NIP-07 browser extension
    async extension(): Promise<void> {
      const login = await NLogin.fromExtension();
      addLogin(login);
    },
    // Log out the current user
    async logout(): Promise<void> {
      const login = logins[0];
      if (login) {
        removeLogin(login.id);
      }
    }
  };
}
</file>

<file path="src/components/auth/LoginArea.tsx">
// NOTE: This file is stable and usually should not be modified.
// It is important that all functionality in this file is preserved, and should only be modified if explicitly requested.
import { Button } from "@/components/ui/button.tsx";
import { useLoggedInAccounts } from "@/hooks/useLoggedInAccounts";
import { User } from "lucide-react";
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import { AccountSwitcher } from "./AccountSwitcher";
import LoginDialog from "./LoginDialog";
import SignupDialog from "./SignupDialog";
export function LoginArea() {
	const { currentUser } = useLoggedInAccounts();
	const [loginDialogOpen, setLoginDialogOpen] = useState(false);
	const [signupDialogOpen, setSignupDialogOpen] = useState(false);
	const navigate = useNavigate();
	const handleLogin = () => {
		setLoginDialogOpen(false);
		setSignupDialogOpen(false);
	};
	return (
		<>
			{currentUser ? (
				<button
					onClick={() => navigate("/settings")}
					type="button"
					className="flex items-center gap-3 p-3 rounded-full w-full text-foreground max-w-60 focus:outline-none focus:ring-2 focus:ring-primary"
					title="Account settings"
				>
					<img
						src={currentUser.metadata.picture}
						alt={currentUser.metadata.name}
						className="w-10 h-10 rounded-full object-cover"
					/>
					<div className="flex-1 text-left hidden md:block truncate">
						<p className="font-medium text-sm truncate">
							{currentUser.metadata.name || currentUser.pubkey}
						</p>
					</div>
				</button>
			) : (
				<Button
					onClick={() => setLoginDialogOpen(true)}
					className="flex items-center gap-2 px-4 py-2 rounded-full bg-primary text-primary-foreground w-full font-medium transition-all hover:bg-primary/90 animate-scale-in"
				>
					<User className="w-4 h-4" />
					<span>Log in</span>
				</Button>
			)}
			<LoginDialog
				isOpen={loginDialogOpen}
				onClose={() => setLoginDialogOpen(false)}
				onLogin={handleLogin}
				onSignup={() => setSignupDialogOpen(true)}
			/>
			<SignupDialog
				isOpen={signupDialogOpen}
				onClose={() => setSignupDialogOpen(false)}
			/>
		</>
	);
}
</file>

<file path="src/components/EditProfileForm.tsx">
import { Button } from "@/components/ui/button";
import {
	Form,
	FormControl,
	FormDescription,
	FormField,
	FormItem,
	FormLabel,
	FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Switch } from "@/components/ui/switch";
import { Textarea } from "@/components/ui/textarea";
import { useCurrentUser } from "@/hooks/useCurrentUser";
import { useNostrPublish } from "@/hooks/useNostrPublish";
import { useToast } from "@/hooks/useToast";
import { useUploadFile } from "@/hooks/useUploadFile";
import { zodResolver } from "@hookform/resolvers/zod";
import { type NostrMetadata, NSchema as n } from "@nostrify/nostrify";
import { useQueryClient } from "@tanstack/react-query";
import { Loader2, Upload } from "lucide-react";
import type React from "react";
import { useEffect, useRef } from "react";
import { useForm } from "react-hook-form";
interface EditProfileFormProps {
	initialName?: string;
	onSaved?: () => void;
}
export const EditProfileForm: React.FC<EditProfileFormProps> = ({
	initialName,
	onSaved,
}) => {
	const queryClient = useQueryClient();
	const { user, metadata } = useCurrentUser();
	const { mutateAsync: publishEvent, isPending } = useNostrPublish();
	const { mutateAsync: uploadFile, isPending: isUploading } = useUploadFile();
	const { toast } = useToast();
	// Initialize the form with default values
	const form = useForm<NostrMetadata>({
		resolver: zodResolver(n.metadata()),
		defaultValues: {
			name: initialName || "",
			about: "",
			picture: "",
			banner: "",
			website: "",
			nip05: "",
			bot: false,
		},
	});
	// Update form values when user data is loaded
	useEffect(() => {
		if (metadata) {
			form.reset({
				name: metadata.name || initialName || "",
				about: metadata.about || "",
				picture: metadata.picture || "",
				banner: metadata.banner || "",
				website: metadata.website || "",
				nip05: metadata.nip05 || "",
				bot: metadata.bot || false,
			});
		} else if (initialName) {
			form.setValue("name", initialName);
		}
	}, [metadata, form, initialName]);
	// Handle file uploads for profile picture and banner
	const uploadPicture = async (file: File, field: "picture" | "banner") => {
		try {
			// The first tuple in the array contains the URL
			const [[_, url]] = await uploadFile(file);
			form.setValue(field, url);
			toast({
				title: "Success",
				description: `${field === "picture" ? "Profile picture" : "Banner"} uploaded successfully`,
			});
		} catch (error) {
			console.error(`Failed to upload ${field}:`, error);
			toast({
				title: "Error",
				description: `Failed to upload ${field === "picture" ? "profile picture" : "banner"}. Please try again.`,
				variant: "destructive",
			});
		}
	};
	const onSubmit = async (values: NostrMetadata) => {
		if (!user) {
			toast({
				title: "Error",
				description: "You must be logged in to update your profile",
				variant: "destructive",
			});
			return;
		}
		try {
			// Combine existing metadata with new values
			const data = { ...metadata, ...values };
			// Clean up empty values
			for (const key in data) {
				if (data[key] === "") {
					delete data[key];
				}
			}
			// Publish the metadata event (kind 0)
			await publishEvent({
				kind: 0,
				content: JSON.stringify(data),
			});
			// Invalidate queries to refresh the data
			queryClient.invalidateQueries({ queryKey: ["logins"] });
			queryClient.invalidateQueries({ queryKey: ["author", user.pubkey] });
			toast({
				title: "Success",
				description: "Your profile has been updated",
			});
			if (onSaved) onSaved();
		} catch (error) {
			console.error("Failed to update profile:", error);
			toast({
				title: "Error",
				description: "Failed to update your profile. Please try again.",
				variant: "destructive",
			});
		}
	};
	return (
		<Form {...form}>
			<form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
				<FormField
					control={form.control}
					name="name"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Name</FormLabel>
							<FormControl>
								<Input placeholder="Your name" {...field} />
							</FormControl>
							<FormDescription>
								This is your display name that will be displayed to others.
							</FormDescription>
							<FormMessage />
						</FormItem>
					)}
				/>
				<FormField
					control={form.control}
					name="about"
					render={({ field }) => (
						<FormItem>
							<FormLabel>Bio</FormLabel>
							<FormControl>
								<Textarea
									placeholder="Tell others about yourself"
									className="resize-none"
									{...field}
								/>
							</FormControl>
							<FormDescription>
								A short description about yourself.
							</FormDescription>
							<FormMessage />
						</FormItem>
					)}
				/>
				<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
					<FormField
						control={form.control}
						name="picture"
						render={({ field }) => (
							<ImageUploadField
								field={field}
								label="Profile Picture"
								placeholder="https://example.com/profile.jpg"
								description="URL to your profile picture. You can upload an image or provide a URL."
								previewType="square"
								onUpload={(file) => uploadPicture(file, "picture")}
							/>
						)}
					/>
					<FormField
						control={form.control}
						name="banner"
						render={({ field }) => (
							<ImageUploadField
								field={field}
								label="Banner Image"
								placeholder="https://example.com/banner.jpg"
								description="URL to a wide banner image for your profile. You can upload an image or provide a URL."
								previewType="wide"
								onUpload={(file) => uploadPicture(file, "banner")}
							/>
						)}
					/>
				</div>
				<div className="grid grid-cols-1 md:grid-cols-2 gap-6">
					<FormField
						control={form.control}
						name="website"
						render={({ field }) => (
							<FormItem>
								<FormLabel>Website</FormLabel>
								<FormControl>
									<Input placeholder="https://yourwebsite.com" {...field} />
								</FormControl>
								<FormDescription>
									Your personal website or social media link.
								</FormDescription>
								<FormMessage />
							</FormItem>
						)}
					/>
				</div>
				<Button
					type="submit"
					className="w-full md:w-auto"
					disabled={isPending || isUploading}
				>
					{(isPending || isUploading) && (
						<Loader2 className="mr-2 h-4 w-4 animate-spin" />
					)}
					Save Profile
				</Button>
			</form>
		</Form>
	);
};
// Reusable component for image upload fields
interface ImageUploadFieldProps {
	field: {
		value: string | undefined;
		onChange: (value: string) => void;
		name: string;
		onBlur: () => void;
	};
	label: string;
	placeholder: string;
	description: string;
	previewType: "square" | "wide";
	onUpload: (file: File) => void;
}
const ImageUploadField: React.FC<ImageUploadFieldProps> = ({
	field,
	label,
	placeholder,
	description,
	previewType,
	onUpload,
}) => {
	const fileInputRef = useRef<HTMLInputElement>(null);
	return (
		<FormItem>
			<FormLabel>{label}</FormLabel>
			<div className="flex flex-col gap-2">
				<FormControl>
					<Input
						placeholder={placeholder}
						name={field.name}
						value={field.value ?? ""}
						onChange={(e) => field.onChange(e.target.value)}
						onBlur={field.onBlur}
					/>
				</FormControl>
				<div className="flex items-center gap-2">
					<input
						type="file"
						ref={fileInputRef}
						accept="image/*"
						className="hidden"
						onChange={(e) => {
							const file = e.target.files?.[0];
							if (file) {
								onUpload(file);
							}
						}}
					/>
					<Button
						type="button"
						variant="outline"
						size="sm"
						onClick={() => fileInputRef.current?.click()}
					>
						<Upload className="h-4 w-4 mr-2" />
						Upload Image
					</Button>
					{field.value && (
						<div
							className={`h-10 ${previewType === "square" ? "w-10" : "w-24"} rounded overflow-hidden`}
						>
							<img
								src={field.value}
								alt={`${label} preview`}
								className="h-full w-full object-cover"
							/>
						</div>
					)}
				</div>
			</div>
			<FormDescription>{description}</FormDescription>
			<FormMessage />
		</FormItem>
	);
};
</file>

<file path="src/hooks/useNostrPublish.ts">
import { useNostr } from "@nostrify/react";
import { useMutation } from "@tanstack/react-query";
import { useCurrentUser } from "./useCurrentUser";
interface EventTemplate {
	kind: number;
	content?: string;
	tags?: string[][];
	created_at?: number;
}
export function useNostrPublish() {
	const { nostr } = useNostr();
	const { user } = useCurrentUser();
	return useMutation({
		mutationFn: async (t: EventTemplate) => {
			if (user) {
				const tags = t.tags ?? [];
				// Add the client tag if it doesn't exist
				if (!tags.some((tag) => tag[0] === "client")) {
					// FIXME: Replace "mkstack" with the actual client name
					tags.push(["client", "mkstack"]);
				}
				const event = await user.signer.signEvent({
					kind: t.kind,
					content: t.content ?? "",
					tags,
					created_at: t.created_at ?? Math.floor(Date.now() / 1000),
				});
				await nostr.event(event, { signal: AbortSignal.timeout(5000) });
				return event;
			}
			throw new Error("User is not logged in");
		},
		onError: (error) => {
			console.error("Failed to publish event:", error);
		},
		onSuccess: (data) => {
			console.log("Event published successfully:", data);
		},
	});
}
</file>

<file path="src/lib/utils.ts">
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";
export function cn(...inputs: ClassValue[]) {
	return twMerge(clsx(inputs));
}
// Returns a random two-word name, e.g. "Happy Hamster"
export function randomTwoWordName() {
	const adjectives = [
		"Happy",
		"Brave",
		"Clever",
		"Lucky",
		"Gentle",
		"Swift",
		"Quiet",
		"Bold",
		"Sunny",
		"Mighty",
		"Jolly",
		"Witty",
		"Chill",
		"Nimble",
		"Calm",
		"Daring",
		"Fuzzy",
		"Glowing",
		"Peppy",
		"Zesty",
	];
	const animals = [
		"Hamster",
		"Otter",
		"Fox",
		"Panda",
		"Tiger",
		"Hawk",
		"Dolphin",
		"Wolf",
		"Bear",
		"Rabbit",
		"Sparrow",
		"Lynx",
		"Seal",
		"Falcon",
		"Moose",
		"Badger",
		"Finch",
		"Mole",
		"Fawn",
		"Crane",
	];
	const adj = adjectives[Math.floor(Math.random() * adjectives.length)];
	const animal = animals[Math.floor(Math.random() * animals.length)];
	return `${adj} ${animal}`;
}
</file>

<file path="src/pages/Settings.tsx">
import { EditProfileForm } from "@/components/EditProfileForm";
import { LoginArea } from "@/components/auth/LoginArea";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { useLoggedInAccounts } from "@/hooks/useLoggedInAccounts";
import { Link, useNavigate } from "react-router-dom";
export default function Settings() {
	const { currentUser, removeLogin } = useLoggedInAccounts();
	const navigate = useNavigate();
	if (!currentUser) {
		return (
			<div className="min-h-screen flex flex-col bg-gradient-to-b from-blue-50 to-white">
				<header className="border-b">
					<div className="container mx-auto p-4 flex justify-between items-center">
						<Link
							to="/groups"
							className="text-4xl font-bold flex flex-row items-baseline gap-0 hover:opacity-80 transition-opacity"
						>
							<span className="text-red-500 font-black text-5xl">+</span>
							Chorus
						</Link>
						<div className="account-switcher-small">
							<LoginArea />
						</div>
					</div>
				</header>
				<main className="flex-1 flex items-center justify-center">
					<Card className="max-w-md w-full">
						<CardHeader>
							<CardTitle>Settings</CardTitle>
						</CardHeader>
						<CardContent>
							<p className="text-center text-muted-foreground">
								You must be logged in to view your settings.
							</p>
						</CardContent>
					</Card>
				</main>
			</div>
		);
	}
	const handleLogout = () => {
		removeLogin(currentUser.id);
		navigate("/");
	};
	return (
		<div className="min-h-screen flex flex-col bg-gradient-to-b from-blue-50 to-white">
			<header className="border-b">
				<div className="container mx-auto p-4 flex justify-between items-center">
					<Link
						to="/groups"
						className="text-4xl font-bold flex flex-row items-baseline gap-0 hover:opacity-80 transition-opacity"
					>
						<span className="text-red-500 font-black text-5xl">+</span>
						Chorus
					</Link>
					<div className="account-switcher-small">
						<LoginArea />
					</div>
				</div>
			</header>
			<main className="flex-1 flex items-center justify-center">
				<Card className="max-w-md w-full">
					<CardHeader>
						<CardTitle>Settings</CardTitle>
					</CardHeader>
					<CardContent className="space-y-8">
						<section>
							<h2 className="text-lg font-semibold mb-2">Update Profile</h2>
							<EditProfileForm />
						</section>
						<Separator />
						<section>
							<h2 className="text-lg font-semibold mb-2">Log out</h2>
							<Button
								variant="destructive"
								className="w-full"
								onClick={handleLogout}
							>
								Log out
							</Button>
						</section>
					</CardContent>
				</Card>
			</main>
		</div>
	);
}
</file>

<file path="src/AppRouter.tsx">
import { BrowserRouter, Route, Routes } from "react-router-dom";
import Settings from "@/pages/Settings";
import CreateGroup from "./pages/CreateGroup";
import GroupDetail from "./pages/GroupDetail";
import Groups from "./pages/Groups";
import Index from "./pages/Index";
import NotFound from "./pages/NotFound";
export function AppRouter() {
	return (
		<BrowserRouter>
			<Routes>
				<Route path="/" element={<Index />} />
				<Route path="/groups" element={<Groups />} />
				<Route path="/group/:groupId" element={<GroupDetail />} />
				<Route path="/create-group" element={<CreateGroup />} />
				<Route path="/settings" element={<Settings />} />
				{/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
				<Route path="*" element={<NotFound />} />
			</Routes>
		</BrowserRouter>
	);
}
export default AppRouter;
</file>

<file path="src/pages/Index.tsx">
import { EditProfileForm } from "@/components/EditProfileForm";
import LoginDialog from "@/components/auth/LoginDialog";
import SignupDialog from "@/components/auth/SignupDialog";
import { Button } from "@/components/ui/button";
import { useLoggedInAccounts } from "@/hooks/useLoggedInAccounts";
import { useNostrPublish } from "@/hooks/useNostrPublish";
import { toast } from "@/hooks/useToast";
import { randomTwoWordName } from "@/lib/utils";
import { useCallback, useEffect, useState } from "react";
const Index = () => {
	const { currentUser } = useLoggedInAccounts();
	const [step, setStep] = useState<
		"start" | "signup" | "login" | "profile" | "done"
	>("start");
	const [randomName, setRandomName] = useState<string>("");
	const { mutateAsync: publishEvent, isPending: isPublishing } =
		useNostrPublish();
	const [profileSaved, setProfileSaved] = useState(false);
	// When a user logs in (after signup or login), go to profile step if not done
	useEffect(() => {
		if (currentUser && step !== "profile" && !profileSaved) {
			// Only trigger onboarding if user has no name (or is just created)
			setStep("profile");
			if (!randomName) setRandomName(randomTwoWordName());
		}
	}, [currentUser, step, randomName, profileSaved]);
	// Handler for finishing onboarding (after profile save or skip)
	const handleFinish = useCallback(() => {
		setStep("done");
		setProfileSaved(true);
	}, []);
	// Handler for skipping profile setup
	const handleSkip = useCallback(async () => {
		if (!currentUser) return;
		try {
			await publishEvent({
				kind: 0,
				content: JSON.stringify({ name: randomName }),
			});
			toast({
				title: "Profile created",
				description: `Welcome, ${randomName}!`,
			});
			handleFinish();
		} catch (e) {
			toast({
				title: "Error",
				description: "Failed to save profile",
				variant: "destructive",
			});
		}
	}, [currentUser, publishEvent, randomName, handleFinish]);
	// Handler for when EditProfileForm is submitted
	const handleProfileSaved = useCallback(() => {
		toast({
			title: "Profile updated",
			description: "Your profile has been saved.",
		});
		handleFinish();
	}, [handleFinish]);
	// UI rendering logic
	return (
		<div className="min-h-screen flex flex-col bg-gradient-to-b from-blue-50 to-white">
			{/* Header */}
			<header className="border-b">
				<div className="container mx-auto p-4 flex justify-between items-center">
					<h1 className="text-4xl font-bold flex flex-row items-baseline gap-0">
						<span className="text-red-500 font-black text-5xl">+</span>
						Chorus
					</h1>
				</div>
			</header>
			<main className="flex-1 flex items-center justify-center">
				<div className="container mx-auto px-4 py-16 max-w-md w-full">
					{step === "start" && (
						<div className="bg-white rounded-2xl shadow-lg p-8 text-center space-y-6">
							<h2 className="text-3xl font-bold mb-2">Welcome to Chorus</h2>
							<p className="text-gray-600 mb-6">
								Join decentralized communities on Nostr. To get started, create
								a new account or sign in with your existing Nostr key.
							</p>
							<Button
								className="w-full py-6 text-lg"
								onClick={() => setStep("signup")}
							>
								Create a new account
							</Button>
							<div className="text-sm text-gray-500 mt-4">
								Already have an account?{" "}
								<button
									type="button"
									className="text-blue-600 hover:underline font-medium"
									onClick={() => setStep("login")}
								>
									Sign in with existing Nostr account
								</button>
							</div>
						</div>
					)}
					{step === "signup" && (
						<SignupDialog isOpen={true} onClose={() => setStep("start")} />
					)}
					{step === "login" && (
						<LoginDialog
							isOpen={true}
							onClose={() => setStep("start")}
							onLogin={() => setStep("profile")}
						/>
					)}
					{step === "profile" && currentUser && !profileSaved && (
						<div className="bg-white rounded-2xl shadow-lg p-8">
							<h2 className="text-2xl font-bold mb-4 text-center">
								Set up your profile
							</h2>
							<p className="text-gray-600 text-center mb-6">
								This is how you'll appear to others. You can change it later.
							</p>
							<EditProfileForm
								key={currentUser.pubkey}
								initialName={randomName}
								onSaved={handleProfileSaved}
							/>
							<Button
								variant="outline"
								className="w-full mt-4"
								onClick={handleSkip}
								disabled={isPublishing}
							>
								Skip for now
							</Button>
						</div>
					)}
					{step === "done" && (
						<div className="bg-white rounded-2xl shadow-lg p-8 text-center space-y-6">
							<h2 className="text-2xl font-bold">You're all set!</h2>
							<p className="text-gray-600">
								Your account is ready. You can now join communities and start
								connecting.
							</p>
							<Button className="w-full py-6 text-lg" asChild>
								<a href="/groups">Continue to Communities</a>
							</Button>
						</div>
					)}
				</div>
			</main>
			{/* Footer */}
			<footer className="bg-gray-100 py-8 mt-auto">
				<div className="container mx-auto px-4 text-center text-gray-600">
					<p>Built with Nostr NIP-72 • Decentralized Communities</p>
				</div>
			</footer>
		</div>
	);
};
export default Index;
</file>

</files>
