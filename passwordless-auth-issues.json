[
  {
    "title": "Enable Firebase Passwordless Authentication Setup",
    "body": "## 🎯 Objective\n\nConfigure Firebase Console to enable passwordless authentication (magic links) for the Wavlake application.\n\n## 📋 Tasks\n\n### Firebase Console Configuration\n- [ ] Navigate to Firebase Console → Authentication → Sign-in method\n- [ ] Enable \"Email/Password\" provider (if not already enabled)\n- [ ] Enable \"Email link (passwordless sign-in)\" option\n- [ ] Configure authorized domains:\n  - [ ] `localhost` (for development)\n  - [ ] `wavlake.com` (production)\n  - [ ] Any staging domains\n\n### Optional Enhancements\n- [ ] Set up Firebase Dynamic Links for prettier email URLs\n- [ ] Configure email templates in Firebase Console\n- [ ] Test email delivery in development environment\n\n## 🧪 Acceptance Criteria\n\n- [ ] Passwordless authentication is enabled in Firebase Console\n- [ ] All required domains are authorized\n- [ ] Test emails are delivered successfully in development\n- [ ] Configuration is documented for team members\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` for detailed setup instructions.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `firebase`, `setup`",
    "labels": ["enhancement", "authentication", "firebase", "setup"]
  },
  {
    "title": "Create EmailLinkInputForm Component",
    "body": "## 🎯 Objective\n\nCreate a React component for email input form used in passwordless authentication flow.\n\n## 📋 Implementation Details\n\n### Component Requirements\n- Email input field with validation\n- \"Send magic link\" button\n- Loading state during email sending\n- Error handling and display\n- Email validation with visual feedback\n- Responsive design\n\n### File Location\n`src/components/auth/EmailLinkInputForm.tsx`\n\n### Props Interface\n```typescript\ninterface EmailLinkInputFormProps {\n  email: string;\n  onEmailChange: (email: string) => void;\n  onSendLink: (email: string) => Promise<void>;\n  isLoading: boolean;\n  error: string | null;\n}\n```\n\n### Key Features\n- Real-time email validation\n- Disabled state during loading\n- Clear error messaging\n- Accessible form elements\n- shadcn/ui components integration\n\n## 🧪 Acceptance Criteria\n\n- [ ] Component renders correctly with all props\n- [ ] Email validation works (valid/invalid states)\n- [ ] Loading state disables form interaction\n- [ ] Error messages display properly\n- [ ] Form submission triggers onSendLink callback\n- [ ] Responsive design works on mobile\n- [ ] Accessibility requirements met\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 277-354 for complete implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `component`, `react`",
    "labels": ["enhancement", "authentication", "component", "react"]
  },
  {
    "title": "Create EmailLinkSentView Component",
    "body": "## 🎯 Objective\n\nCreate a \"Check your email\" view component that displays after magic link is sent.\n\n## 📋 Implementation Details\n\n### Component Requirements\n- Email confirmation display\n- \"Open email app\" button\n- Resend email functionality with countdown timer\n- \"Use different email\" back button\n- Instructional content\n- Loading states for resend action\n\n### File Location\n`src/components/auth/EmailLinkSentView.tsx`\n\n### Props Interface\n```typescript\ninterface EmailLinkSentViewProps {\n  email: string;\n  onResend: () => Promise<void>;\n  onBack: () => void;\n}\n```\n\n### Key Features\n- 60-second countdown before allowing resend\n- \"Open email app\" button (attempts to open default mail client)\n- Visual feedback with mail icon\n- Clear instructions for users\n- Rate limiting prevention\n- Helpful tips about keeping window open\n\n## 🧪 Acceptance Criteria\n\n- [ ] Component displays sent email address\n- [ ] Countdown timer works correctly (60 seconds)\n- [ ] Resend button is disabled during countdown\n- [ ] \"Open email app\" button triggers mail client\n- [ ] Back button works correctly\n- [ ] Loading states during resend\n- [ ] Responsive design\n- [ ] Clear user instructions\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 356-477 for complete implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `component`, `react`",
    "labels": ["enhancement", "authentication", "component", "react"]
  },
  {
    "title": "Create useEmailLinkAuth Hook",
    "body": "## 🎯 Objective\n\nCreate a custom React hook to handle Firebase email link authentication logic.\n\n## 📋 Implementation Details\n\n### Hook Requirements\n- Send email link functionality\n- Complete email link sign-in\n- Error handling for Firebase auth errors\n- Loading states\n- Local storage management for cross-device support\n\n### File Location\n`src/hooks/useEmailLinkAuth.ts`\n\n### Hook Interface\n```typescript\nexport function useEmailLinkAuth() {\n  const sendEmailLink: (email: string) => Promise<{success: boolean, error?: string}>;\n  const completeEmailLinkSignIn: (emailLink: string) => Promise<{success: boolean, user?: FirebaseUser, error?: string}>;\n  const isLoading: boolean;\n  const error: string | null;\n}\n```\n\n### Key Features\n- Firebase `sendSignInLinkToEmail` integration\n- Firebase `signInWithEmailLink` integration\n- ActionCodeSettings configuration\n- Cross-device email storage in localStorage\n- Comprehensive error handling\n- iOS/Android deep linking support\n\n## 🧪 Acceptance Criteria\n\n- [ ] Hook sends email links successfully\n- [ ] Hook completes sign-in from email links\n- [ ] Error handling covers all Firebase auth errors\n- [ ] Loading states are properly managed\n- [ ] localStorage is used for cross-device support\n- [ ] ActionCodeSettings are properly configured\n- [ ] Hook is reusable across components\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 188-273 for complete implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `hook`, `firebase`",
    "labels": ["enhancement", "authentication", "hook", "firebase"]
  },
  {
    "title": "Create AuthComplete Page Component",
    "body": "## 🎯 Objective\n\nCreate a dedicated page component to handle magic link completion and user redirection.\n\n## 📋 Implementation Details\n\n### Component Requirements\n- Handle email link verification\n- Loading state during verification\n- Success state with redirect\n- Error state with recovery options\n- Automatic navigation to intended destination\n\n### File Location\n`src/pages/AuthComplete.tsx`\n\n### Route Configuration\n```typescript\n// Add to router\n{\n  path: '/auth/complete',\n  element: <AuthCompletePage />\n}\n```\n\n### Key Features\n- Uses `useEmailLinkAuth` hook\n- Handles email link validation\n- Manages loading/success/error states\n- Redirects to intended destination (from location state)\n- Fallback to dashboard if no intended destination\n- Clear error messages with recovery options\n\n## 🧪 Acceptance Criteria\n\n- [ ] Page loads and immediately attempts link verification\n- [ ] Loading state displays during verification\n- [ ] Success state shows and redirects automatically\n- [ ] Error state displays with clear messaging\n- [ ] Redirection works to intended destination\n- [ ] Fallback redirection to dashboard works\n- [ ] Error recovery options are provided\n- [ ] Page handles invalid/expired links gracefully\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 479-595 for complete implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `page`, `routing`",
    "labels": ["enhancement", "authentication", "page", "routing"]
  },
  {
    "title": "Add /auth/complete Route",
    "body": "## 🎯 Objective\n\nAdd the `/auth/complete` route to the application routing configuration to handle magic link completion.\n\n## 📋 Implementation Details\n\n### Route Configuration\n- Add route to main router configuration\n- Ensure route is accessible without authentication\n- Configure proper route parameters if needed\n- Test route accessibility\n\n### File to Update\n`src/main.tsx` or wherever routing is configured\n\n### Route Addition\n```typescript\n{\n  path: '/auth/complete',\n  element: <AuthCompletePage />\n}\n```\n\n## 🧪 Acceptance Criteria\n\n- [ ] Route is added to router configuration\n- [ ] Route is accessible via direct URL\n- [ ] Route renders AuthCompletePage component\n- [ ] Route works in both development and production\n- [ ] Route doesn't require authentication\n- [ ] Route handles query parameters correctly\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 481-488 for routing requirements.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `routing`, `configuration`",
    "labels": ["enhancement", "authentication", "routing", "configuration"]
  },
  {
    "title": "Update FirebaseAuthDialog with Passwordless Tabs",
    "body": "## 🎯 Objective\n\nEnhance the existing FirebaseAuthDialog component to support both password and passwordless authentication methods using a tabbed interface.\n\n## 📋 Implementation Details\n\n### Component Updates\n- Add tabbed interface using shadcn/ui Tabs component\n- Integrate EmailLinkInputForm and EmailLinkSentView\n- Update component props to support defaultTab\n- Manage auth state across both methods\n- Preserve existing password authentication functionality\n\n### File to Update\n`src/components/auth/FirebaseAuthDialog.tsx`\n\n### New Props\n```typescript\ninterface FirebaseAuthDialogProps {\n  // ... existing props\n  defaultTab?: 'password' | 'passwordless';\n}\n```\n\n### Key Features\n- Tab switching between Password and Passwordless\n- State management for both auth methods\n- Integration with useEmailLinkAuth hook\n- Preserved existing password auth functionality\n- Proper error handling for both methods\n\n## 🧪 Acceptance Criteria\n\n- [ ] Tabs render correctly (Password/Passwordless)\n- [ ] Tab switching works without losing state\n- [ ] Password authentication still works as before\n- [ ] Passwordless authentication flow is complete\n- [ ] Error handling works for both methods\n- [ ] Component maintains existing API compatibility\n- [ ] Loading states work for both tabs\n- [ ] Responsive design maintained\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 89-186 for complete implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `component`, `breaking-change`",
    "labels": ["enhancement", "authentication", "component", "breaking-change"]
  },
  {
    "title": "Implement Rate Limiting for Email Link Requests",
    "body": "## 🎯 Objective\n\nImplement client-side rate limiting to prevent abuse of email link sending functionality.\n\n## 📋 Implementation Details\n\n### Rate Limiting Requirements\n- Maximum 3 email requests per 5-minute window\n- Client-side enforcement using localStorage\n- Clear user feedback when rate limited\n- Countdown timer showing when next request allowed\n\n### Implementation Approach\n- Create custom hook `useRateLimiter`\n- Track request timestamps in localStorage\n- Integrate with EmailLinkInputForm component\n- Display rate limit messaging\n\n### File Locations\n- `src/hooks/useRateLimiter.ts` (new)\n- Update `src/components/auth/EmailLinkInputForm.tsx`\n\n### Rate Limiter Hook\n```typescript\nconst useRateLimiter = (maxAttempts: number = 3, windowMs: number = 300000) => {\n  const canMakeRequest: () => boolean;\n  const recordAttempt: () => void;\n  const timeUntilNextAttempt: () => number;\n}\n```\n\n## 🧪 Acceptance Criteria\n\n- [ ] Rate limiting works (3 requests per 5 minutes)\n- [ ] User receives clear feedback when rate limited\n- [ ] Countdown timer shows time until next allowed request\n- [ ] Rate limiting persists across browser sessions\n- [ ] Rate limiting resets after time window\n- [ ] Error messages are user-friendly\n- [ ] Rate limiting doesn't interfere with successful requests\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 632-656 for implementation details.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `security`, `rate-limiting`",
    "labels": ["enhancement", "authentication", "security", "rate-limiting"]
  },
  {
    "title": "Add Comprehensive Error Handling for Email Links",
    "body": "## 🎯 Objective\n\nImplement comprehensive error handling for all email link authentication scenarios.\n\n## 📋 Implementation Details\n\n### Error Scenarios to Handle\n- Invalid email format\n- Network failures\n- Firebase rate limiting\n- Invalid/expired email links\n- Cross-device email verification\n- User not found errors\n\n### Error Handling Requirements\n- User-friendly error messages\n- Recovery options for each error type\n- Proper error logging\n- Fallback mechanisms\n\n### File Updates\n- `src/hooks/useEmailLinkAuth.ts`\n- `src/components/auth/EmailLinkInputForm.tsx`\n- `src/components/auth/EmailLinkSentView.tsx`\n- `src/pages/AuthComplete.tsx`\n\n### Error Message Mapping\n```typescript\nconst getFirebaseErrorMessage = (error: any): string => {\n  // Map Firebase error codes to user-friendly messages\n}\n```\n\n## 🧪 Acceptance Criteria\n\n- [ ] All Firebase error codes are handled\n- [ ] Error messages are user-friendly and actionable\n- [ ] Network errors provide retry options\n- [ ] Invalid links show clear messaging\n- [ ] Expired links offer resend option\n- [ ] Cross-device scenarios are handled\n- [ ] Error recovery flows work correctly\n- [ ] Error logging doesn't expose sensitive info\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 597-629 for error handling implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `error-handling`, `user-experience`",
    "labels": ["enhancement", "authentication", "error-handling", "user-experience"]
  },
  {
    "title": "Test Cross-Device Email Link Scenarios",
    "body": "## 🎯 Objective\n\nImplement and test cross-device email link authentication scenarios (send on mobile, click on desktop, etc.).\n\n## 📋 Implementation Details\n\n### Cross-Device Scenarios\n- Email sent on mobile, link clicked on desktop\n- Email sent on desktop, link clicked on mobile\n- Link clicked on different browser\n- Link clicked after localStorage is cleared\n\n### Implementation Requirements\n- Email prompt when localStorage is empty\n- Proper handling of `isSignInWithEmailLink` validation\n- User-friendly cross-device messaging\n- Graceful fallback when email is not available\n\n### File Updates\n- `src/hooks/useEmailLinkAuth.ts`\n- `src/pages/AuthComplete.tsx`\n\n### Cross-Device Handling\n```typescript\n// Handle cross-device scenarios\nlet email = localStorage.getItem('emailForSignIn');\nif (!email) {\n  email = window.prompt('Please provide your email for confirmation');\n}\n```\n\n## 🧪 Acceptance Criteria\n\n- [ ] Cross-device scenarios work correctly\n- [ ] Email prompt appears when localStorage is empty\n- [ ] Link validation works across devices\n- [ ] User receives clear instructions for cross-device usage\n- [ ] Fallback mechanisms work when email is unavailable\n- [ ] Testing covers all major cross-device scenarios\n- [ ] Error handling is comprehensive\n\n## 📚 Reference\n\nSee `FIREBASE_PASSWORDLESS_AUTH_DESIGN.md` lines 679-699 for cross-device implementation.\n\n## 🏷️ Labels\n\n`enhancement`, `authentication`, `testing`, `cross-device`",
    "labels": ["enhancement", "authentication", "testing", "cross-device"]
  }
]